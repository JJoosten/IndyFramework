#version 430

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shader_storage_buffer_object : require

// uniforms
uniform float DeltaTimeSec;

// structs for shader storage buffer objects or uniform buffers
struct VertexData
{
	vec4 pos;
	vec4 norm;
};

// shader storage buffer objects (SSBO)
layout(std430, binding = 0) buffer oceanVerticesSSBO
{
	VertexData vertices [];
};


// fft kernel to compute new ocean height, we output an updated vertex buffer
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main() 
{
	/* Compute Shader Input From OpenGL 
	--- Work group dimensions ---
	gl_NumWorkGroups (uvec3)
	gl_WorkGroupSize (const uvec3)
	--- Work group and invocation IDs ---
	gl_WorkGroupID (uvec3)
	gl_LocalInvocationID (uvec3)
	--- Derived variables ---
	gl_GlobalInvocationID (uvec3)
	gl_LocalInvocationIndex (uint) */

	//
	vertices[gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x].pos.y += (10.0f * DeltaTimeSec);
}