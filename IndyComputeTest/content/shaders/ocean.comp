#version 430

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shader_storage_buffer_object : require

#include "../SharedDefines.defines" // holds WORK_GROUP_SIZE

#define PI 3.1415926535897932384626433832795

#define W0 0.03141592654// 2.0 * PI / 200.0

// uniforms
uniform float G; // GRAVITY CONSTANT
uniform float TimeSec;
uniform float Length;
uniform int N; // dimension

#define Complex vec2

struct ComplexVecNorm
{
	Complex H;
	vec2 D;
	vec3 N;
};

// structs for shader storage buffer objects or uniform buffers
struct VertexData
{
	vec4 pos;
	vec4 norm;
};

// shader storage buffer objects (SSBO)
layout(std140, binding = SHADER_LAYOUT_INDEX_VERTICES) buffer oceanVerticesSSBO
{
	VertexData vertices[];
};

layout(std430, binding = SHADER_LAYOUT_INDEX_RANDOM_VARS) buffer oceanRandNumbersSSBO
{
	Complex randNumbers[];
};

layout(std140, binding = SHADER_LAYOUT_INDEX_HVALUES) buffer oceanComplexNumbers
{
	vec4 hvars[];
};

// we have 32kb per thread group == 32 bytes per thread on 32x32 incovations

// ------ FUNCTIONS -------
Complex complexMul(Complex a, Complex b)
{
	return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float dispersion(int nPrime, int mPrime)
{
	float kx = PI * (2 * nPrime - N) / Length;
	float kz = PI * (2 * mPrime - N) / Length;
    return floor(sqrt(G * sqrt(kx * kx + kz * kz)) / W0) * W0;
}

Complex hTilde(int nPrime, int mPrime)
{
	int index = mPrime * N + nPrime;
	
	Complex hTildeZero = Complex(hvars[index].x, hvars[index].y);
	Complex hTildeZeromkconj = Complex(hvars[index].z, hvars[index].w);
	
    float omegat = dispersion(nPrime, mPrime) * TimeSec;

	float co = cos(omegat);
    float si = sin(omegat);
 
    Complex c0 = Complex(co,  si);
    Complex c1 = Complex(co, -si);
	
	// vector addition already is a.x + b.x, a.y + b.y
	Complex res = complexMul(hTildeZero, c0) + complexMul(hTildeZeromkconj, c1);
 
    return res;
}

ComplexVecNorm HDN(vec2 x)
{
	Complex h = Complex(0.0,0.0);
	vec2 d = vec2(0.0,0.0);
	vec3 norm = vec3(0.0,0.0,0.0);

	for(int m = 0; m < N; m++)
	{
		float kz = 2.0 * PI * (m - N / 2.0) / Length;
		for(int n = 0; n < N; n++)
		{
			float kx = 2.0 * PI * (n - N / 2.0) / Length;
			
			vec2 k = vec2(kx, kz);

			float kDotX = dot(k,x);

			Complex c = Complex(cos(kDotX), sin(kDotX));
			Complex hTildeC = complexMul( hTilde(n,m), c);
			
			h = h + hTildeC;

			norm = norm + vec3(-kx * hTildeC.y, 0.0, -kz * hTildeC.y);
			
			float kLength = length(k);

			if(kLength < 0.000001) continue;

			d = d + vec2(kx / kLength * hTildeC.y, kz / kLength * hTildeC.y);
		}
	}

	norm = normalize(vec3(0.0,1.0,0.0) - norm);

	ComplexVecNorm r;
	r.H = h;
	r.D = d;
	r.N = norm;

	return r;
	
}


// fft kernel to compute new ocean height, we output an updated vertex buffer
layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
void main() 
{
	/* Compute Shader Input From OpenGL 
	--- Work group dimensions ---
	gl_NumWorkGroups (uvec3)
	gl_WorkGroupSize (const uvec3)
	--- Work group and invocation IDs ---
	gl_WorkGroupID (uvec3)
	gl_LocalInvocationID (uvec3)
	--- Derived variables ---
	gl_GlobalInvocationID (uvec3)
	gl_LocalInvocationIndex (uint) */

	float lambda = -1.0;

	uint index = gl_GlobalInvocationID.y * N + gl_GlobalInvocationID.x;

    ComplexVecNorm hdn = HDN(vertices[index].pos.xz);
 
	// original x and z are stored in w component of pos and norm
    vertices[index].pos.x = vertices[index].pos.w + lambda * hdn.D.x;
    vertices[index].pos.y = hdn.H.x;
    vertices[index].pos.z = vertices[index].norm.w + lambda * hdn.D.y;
 
    vertices[index].norm.x = hdn.N.x;
    vertices[index].norm.y = hdn.N.y;
    vertices[index].norm.z = hdn.N.z;

	/*
    if (index == 0)
	{
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.y = hdn.H.x;
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.x = vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.w + lambda * hdn.D.x;
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.z = vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.w + lambda * hdn.D.y;
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.x = hdn.N.x;
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.y = hdn.N.y;
        vertices[(NUM_VERTICES_PER_EDGE - 1) + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.z = hdn.N.z;
    }
    if (gl_GlobalInvocationID.x == 0) {
        vertices[index + NUM_VERTICES_PER_EDGE - 1].pos.y = hdn.H.x;
        vertices[index + NUM_VERTICES_PER_EDGE - 1].pos.x = vertices[index + NUM_VERTICES_PER_EDGE - 1].pos.w + lambda * hdn.D.x;
        vertices[index + NUM_VERTICES_PER_EDGE - 1].pos.z = vertices[index + NUM_VERTICES_PER_EDGE - 1].norm.w + lambda * hdn.D.y;
        vertices[index + NUM_VERTICES_PER_EDGE - 1].norm.x = hdn.N.x;
        vertices[index + NUM_VERTICES_PER_EDGE - 1].norm.y = hdn.N.y;
        vertices[index + NUM_VERTICES_PER_EDGE - 1].norm.z = hdn.N.z;
    }
    if (gl_GlobalInvocationID.y == 0) {
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.y = hdn.H.x;
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.x = vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.w + lambda*hdn.D.x;
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].pos.z = vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.w + lambda*hdn.D.y;
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.x = hdn.N.x;
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.y = hdn.N.y;
        vertices[index + NUM_VERTICES_PER_EDGE * (NUM_VERTICES_PER_EDGE - 1)].norm.z = hdn.N.z;
    }*/
}