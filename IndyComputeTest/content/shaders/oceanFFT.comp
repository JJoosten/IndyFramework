#version 430

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shader_storage_buffer_object : require

#include "../SharedDefines.defines" // holds WORK_GROUP_SIZE

#define PI 3.1415926535897932384626433832795

#define W0 2.0 * PI / 200.0

// uniforms
uniform vec2 W; // wind in m/s
uniform float G; // GRAVITY CONSTANT
uniform float A; // phillips spectrum
uniform float DeltaTimeSec;
uniform float Length;
uniform int N; // dimension

#define Complex vec2

struct ComplexVecNorm
{
	Complex H;
	vec2 D;
	vec3 N;
};

// structs for shader storage buffer objects or uniform buffers
struct VertexData
{
	vec4 pos;
	vec4 norm;
};

// shader storage buffer objects (SSBO)
layout(std140, binding = SHADER_LAYOUT_INDEX_VERTICES) buffer oceanVerticesSSBO
{
	VertexData vertices[];
};

layout(std430, binding = SHADER_LAYOUT_INDEX_RANDOM_VARS) buffer oceanRandNumbersSSBO
{
	Complex randNumbers[];
};

layout(std140, binding = SHADER_LAYOUT_INDEX_HVALUES) buffer oceanComplexNumbers
{
	vec4 hvars[];
};

// we have 32kb per thread group == 32 bytes per thread on 32x32 incovations



// ------ FUNCTIONS -------
Complex complexMul(Complex a, Complex b)
{
	return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float dispersion(int nPrime, int mPrime)
{
	float kx = PI * (2 * nPrime - N) / Length;
	float kz = PI * (2 * mPrime - N) / Length;
    return floor(sqrt(G * sqrt(kx * kx + kz * kz)) / W0) * W0;
}

float phillipsSpectrum(int nPrime, int mPrime)
{
	vec2 k = vec2(PI * (2 * nPrime - N) / Length, PI * (2 * mPrime - N) / Length);
	
	float kLength = length(k);
	
    if (kLength < 0.000001) return 0.0;

	float kLengthPow2 = kLength * kLength;
	float kLengthPow4 = kLengthPow2 * kLengthPow2;
	
	float wLength = length(W);
	float kDotW = dot(k / kLength, W / wLength);
	float kDotWPow2 = kDotW * kDotW *  kDotW * kDotW *  kDotW * kDotW;
	float L = wLength * wLength / G;
	float LPow2 = L * L;

	float dampening = 0.001;
	float DampeningLPow2 = LPow2 * dampening * dampening;

	return A * exp(-1.0 / (kLengthPow2 * LPow2)) / kLengthPow4 * kDotWPow2 * exp(-kLengthPow2 * LPow2);
}

Complex hTilde0(int nPrime, int mPrime)
{
	// random gaussian var on gpu
	uint index = mPrime * NUM_VERTICES_PER_EDGE + nPrime;

	float phillipsVal = sqrt( phillipsSpectrum( nPrime, mPrime) / 2.0);

	Complex gaussianRand = randNumbers[index] * phillipsVal;

	return gaussianRand;
}

Complex hTilde(int nPrime, int mPrime)
{
	uint index = mPrime * NUM_VERTICES_PER_EDGE + nPrime;
	
	Complex hTildeZero = Complex(hvars[index].x, hvars[index].y);
	Complex hTildeZeromkconj = Complex(hvars[index].z, hvars[index].w);
	
    float omegat = dispersion(nPrime, mPrime) * DeltaTimeSec;

	float co = cos(omegat);
    float si = sin(omegat);
 
    Complex c0 = Complex(co,  si);
    Complex c1 = Complex(co, -si);
	
	// vector addition already is a.x + b.x, a.y + b.y
	Complex res = complexMul(hTildeZero, c0) + complexMul(hTildeZeromkconj, c1);
 
    return res;
}

ComplexVecNorm HDN(vec2 x)
{
	Complex h = Complex(0.0,0.0);
	vec2 d = vec2(0.0,0.0);
	vec3 norm = vec3(0.0,0.0,0.0);

	for(int m = 0; m < N; m++)
	{
		float kz = 2.0 * PI * (m - N / 2.0) / Length;
		for(int n = 0; n < N; n++)
		{
			float kx = 2.0 * PI * (n - N / 2.0) / Length;
			
			vec2 k = vec2(kx, kz);
			float kLength = length(k);

			float kDotX = dot(k,x);

			Complex c = Complex(cos(kDotX), sin(kDotX));
			Complex hTildeC = complexMul(hTilde(n,m),c);
			
			Complex h = h + hTildeC;

			norm = norm + vec3(-kx * hTildeC.y, 0.0, -kz * hTildeC.y);

			if(kLength < 0.000001) 
				continue;

			d = d + vec2(kx / kLength * hTildeC.y, kz / kLength * hTildeC.y);

		}
	}

	norm = normalize(vec3(0.0,1.0,0.0) - norm);

	ComplexVecNorm r;
	r.H = h;
	r.D = d;
	r.N = norm;

	return r;
	
}


// fft kernel to compute new ocean height, we output an updated vertex buffer
layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
void main() 
{
	/* Compute Shader Input From OpenGL 
	--- Work group dimensions ---
	gl_NumWorkGroups (uvec3)
	gl_WorkGroupSize (const uvec3)
	--- Work group and invocation IDs ---
	gl_WorkGroupID (uvec3)
	gl_LocalInvocationID (uvec3)
	--- Derived variables ---
	gl_GlobalInvocationID (uvec3)
	gl_LocalInvocationIndex (uint) */

	uint index = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;



}