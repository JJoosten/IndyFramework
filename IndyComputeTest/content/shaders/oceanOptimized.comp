#version 430

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shader_storage_buffer_object : require

#include "../SharedDefines.defines" // holds WORK_GROUP_SIZE

#define PI 3.1415926535897932384626433832795

#define W0 0.03141592654// 2.0 * PI / 200.0

// uniforms
uniform float G; // GRAVITY CONSTANT
uniform float TimeSec;
uniform float Length;
uniform int N; // dimension

#define Complex vec2

struct ComplexVecNorm
{
	Complex H;
	vec2 D;
	vec3 N;
};

// structs for shader storage buffer objects or uniform buffers
struct VertexData
{
	vec4 pos;
	vec4 norm;
};

// shader storage buffer objects (SSBO)
layout(std140, binding = SHADER_LAYOUT_INDEX_VERTICES) buffer oceanVerticesSSBO
{
	VertexData vertices[];
};

layout(std430, binding = SHADER_LAYOUT_INDEX_RANDOM_VARS) buffer oceanRandNumbersSSBO
{
	Complex randNumbers[];
};

layout(std140, binding = SHADER_LAYOUT_INDEX_HVALUES) buffer oceanComplexNumbers
{
	vec4 hvars[];
};

layout(std430, binding = SHADER_LAYOUT_INDEX_DISPERSIONS) buffer oceanDispersions
{
	float dispersions[];
};


// we have 32kb per thread group == 32 bytes per thread on 32x32 incovationss

// ------ FUNCTIONS -------
Complex complexMul(Complex a, Complex b)
{
	return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float dispersion(int nPrime, int mPrime)
{
	float kx = PI * (2 * nPrime - N) / Length;
	float kz = PI * (2 * mPrime - N) / Length;
    return floor(sqrt(G * sqrt(kx * kx + kz * kz)) / W0) * W0;
}

Complex hTilde(int nPrime, int mPrime)
{
	int index = mPrime * N + nPrime;
	
	Complex hTildeZero = Complex(hvars[index].x, hvars[index].y);
	Complex hTildeZeromkconj = Complex(hvars[index].z, hvars[index].w);
	
    float omegat = dispersions[index] * TimeSec;
    //float omegat = dispersion(nPrime, mPrime) * TimeSec;

	float co = cos(omegat);
    float si = sin(omegat);
 
    Complex c0 = Complex(co,  si);
    Complex c1 = Complex(co, -si);
	
	// vector addition already is a.x + b.x, a.y + b.y
	Complex res = complexMul(hTildeZero, c0) + complexMul(hTildeZeromkconj, c1);
 
    return res;
}

shared Complex hTildePreCache[WORK_GROUP_SIZE*WORK_GROUP_SIZE]; // 8KB
shared float kCache[WORK_GROUP_SIZE * WORK_GROUP_SIZE]; // 4KB

ComplexVecNorm HDN(vec2 x)
{
	Complex h = Complex(0.0,0.0);
	vec2 d = vec2(0.0,0.0);
	vec3 norm = vec3(0.0,0.0,0.0);

	float pi2 = 2.0 * PI;
	float halfN = N / 2.0;
	
	int localInvocationX = int(gl_LocalInvocationID.x);
	int localInvocationY = int(gl_LocalInvocationID.y);

	int numSpans = N / WORK_GROUP_SIZE;
	int index = localInvocationY * WORK_GROUP_SIZE + localInvocationX;
	
	for(int s = 0; s < numSpans; s++)
	{
		hTildePreCache[index] = hTilde(localInvocationX + s * WORK_GROUP_SIZE, localInvocationY + s * WORK_GROUP_SIZE);
		kCache[index] = pi2 * (localInvocationX + s * WORK_GROUP_SIZE - halfN) / Length;
		
		memoryBarrierShared();

		for(int m = 0; m < WORK_GROUP_SIZE; m++)
		{
			float kz = kCache[m];

			for(int n = 0; n < WORK_GROUP_SIZE; n++)
			{
				float kx = kCache[n];
				
				vec2 k = vec2(kx, kz);
				
				float kDotX = dot(k,x);
				
				Complex c = Complex(cos(kDotX), sin(kDotX));
				Complex hTildeC = complexMul( hTildePreCache[m * WORK_GROUP_SIZE + n], c);
				
				h = h + hTildeC;

				norm = norm + vec3(-kx * hTildeC.y, 0.0, -kz * hTildeC.y);
			
				float kLength = length(k);
			
				float mulKlength = 0.0;
				if(kLength > 0.00001)
					mulKlength = 1.0 / kLength;

				float hTildeCyMul = mulKlength * hTildeC.y;

				d = d + vec2(kx * hTildeCyMul, kz * hTildeCyMul);
			}
		}
	}

	norm = normalize(vec3(0.0,1.0,0.0) - norm);

	ComplexVecNorm r;
	r.H = h;
	r.D = d;
	r.N = norm;

	return r;
}


// fft kernel to compute new ocean height, we output an updated vertex buffer
layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
void main() 
{
	float lambda = -1.0;

	uint index = gl_GlobalInvocationID.y * N + gl_GlobalInvocationID.x;

	vec4 vPos = vertices[index].pos;
	vec4 vNorm = vertices[index].norm;

	ComplexVecNorm hdn = HDN(vPos.xz);

	vPos = vec4( vPos.w + lambda * hdn.D.x, hdn.H.x, vNorm.w + lambda * hdn.D.y, vPos.w);
	vNorm = vec4( hdn.N.x, hdn.N.y, hdn.N.z, vNorm.w);
 
	// original x and z are stored in w component of pos and norm
	vertices[index].pos = vPos;
	vertices[index].norm = vNorm;
}