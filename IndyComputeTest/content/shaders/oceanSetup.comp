#version 430

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shader_storage_buffer_object : require

#include "../SharedDefines.defines" // holds WORK_GROUP_SIZE

#define PI 3.1415926535897932384626433832795

#define W0 0.03141592654// 2.0 * PI / 200.0

// uniforms
uniform vec2 W; // wind in m/s
uniform float G; // GRAVITY CONSTANT
uniform float A; // phillips spectrum
uniform float Length;
uniform int N; // dimension

#define Complex vec2

layout(std430, binding = SHADER_LAYOUT_INDEX_RANDOM_VARS) buffer oceanRandNumbersSSBO
{
	Complex randNumbers[];
};

layout(std140, binding = SHADER_LAYOUT_INDEX_HVALUES) buffer oceanComplexNumbers
{
	vec4 hvars[];
};

layout(std430, binding = SHADER_LAYOUT_INDEX_DISPERSIONS) buffer oceanDispersions
{
	float dispersions[];
};


// ------ FUNCTIONS -------
float dispersion(int nPrime, int mPrime)
{
	float kx = PI * (2 * nPrime - N) / Length;
	float kz = PI * (2 * mPrime - N) / Length;
    return floor(sqrt(G * sqrt(kx * kx + kz * kz)) / W0) * W0;
}

float phillipsSpectrum(int nPrime, int mPrime)
{
	vec2 k = vec2(PI * (2 * nPrime - N) / Length, PI * (2 * mPrime - N) / Length);
	
	float kLength = length(k);
	
    if (kLength < 0.000001) return 0.0;

	float kLengthPow2 = kLength * kLength;
	float kLengthPow4 = kLengthPow2 * kLengthPow2;
	
	float wLength = length(W);
	float kDotW = dot(k / kLength, W / wLength);
	float kDotWPow2 = kDotW * kDotW;
	float L = wLength * wLength / G;
	float LPow2 = L * L;

	float dampening = 0.001;
	float DampeningLPow2 = LPow2 * dampening * dampening;

	return A * exp(-1.0 / (kLengthPow2 * LPow2)) / kLengthPow4 * kDotWPow2 * exp(-kLengthPow2 * DampeningLPow2);
}

Complex hTildeStart(int nPrime, int mPrime)
{
	// random gaussian var on gpu
	uint index = mPrime * NUM_VERTICES_PER_EDGE + nPrime;

	float phillipsVal = sqrt( phillipsSpectrum( nPrime, mPrime) / 2.0);

	Complex gaussianRand = randNumbers[index] * phillipsVal;

	return gaussianRand;
}

// fft kernel to initialize the h values
layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
void main() 
{
	/* Compute Shader Input From OpenGL 
	--- Work group dimensions ---
	gl_NumWorkGroups (uvec3)
	gl_WorkGroupSize (const uvec3)
	--- Work group and invocation IDs ---
	gl_WorkGroupID (uvec3)
	gl_LocalInvocationID (uvec3)
	--- Derived variables ---
	gl_GlobalInvocationID (uvec3)
	gl_LocalInvocationIndex (uint) */

	uint index = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;

	int valx = int(gl_GlobalInvocationID.x);
	int valy = int(gl_GlobalInvocationID.y);

	Complex hTilde = hTildeStart(valx,valy);
	Complex hTildeConj = hTildeStart(-valx, -valy);

	hvars[index].xy = hTilde;
	hvars[index].zw = Complex(hTildeConj.x, -hTildeConj.y);

	dispersions[index] = dispersion(valx,valy);

}